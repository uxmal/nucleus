using System.Collections.Generic;
using System.IO;

namespace Nucleus
{
    partial class Nucleus
    {

        static int export_bin2ida(string fname, Binary bin, List<DisasmSection> disasm, CFG cfg)
        {
            /*
            TextWriter f;
            ulong entry;
            int i;

            f = File.CreateText(fname);
            if (f == null)
            {
                Log.print_err("cannot open file '%s' for writing", fname);
                return -1;
            }

            fprintf(f, "\"\"\"\n");
            fprintf(f, "Script generated by %s\n", NUCLEUS_VERSION);
            fprintf(f, "\"\"\"\n");
            fprintf(f, "\n");
            fprintf(f, "import idaapi\n");
            fprintf(f, "import idautils\n");
            fprintf(f, "import idc\n");
            fprintf(f, "\n");
            fprintf(f, "idaapi.autoWait()\n");
            fprintf(f, "\n");
            fprintf(f, "def mark_functions():\n");
            fprintf(f, "    functions = [\n");
            i = 0;
            foreach (var func in cfg.functions)
            {
                if (func.entry.empty()) continue;
                entry = func.entry.front().start;
                if (!(i % 5)) fprintf(f, "        ");
                fprintf(f, "0x%jx, ", entry);
                if (!(++i % 5)) fprintf(f, "\n");
            }
            fprintf(f, "    ]\n");
            fprintf(f, "    for seg in idautils.Segments():\n");
            fprintf(f, "        if idaapi.segtype(idc.SegStart(seg)) != idaapi.SEG_CODE:\n");
            fprintf(f, "            continue\n");
            fprintf(f, "        for f in idautils.Functions(idc.SegStart(seg), idc.SegEnd(seg)):\n");
            fprintf(f, "            print 'nucleus: deleting function 0x%%x' %% (f)\n");
            fprintf(f, "            idc.DelFunction(f)\n");
            fprintf(f, "    for f in functions:\n");
            fprintf(f, "        print 'nucleus: defining function 0x%%x' %% (f)\n");
            fprintf(f, "        if idc.MakeCode(f):\n");
            fprintf(f, "            idc.MakeFunction(f)\n");
            fprintf(f, "\n");
            fprintf(f, "mark_functions()\n");

            fclose(f);
            */
            return 0;
        }


        static int
        export_cfg2dot(string fname, CFG cfg)
        {
            BB bb;

            using TextWriter f = File.CreateText(fname);
            if (f == null)
            {
                Log.print_err("cannot open file '{0}' for writing", fname);
                return -1;
            }

            f.WriteLine("digraph G {");
            f.WriteLine();
            foreach (var kv in cfg.start2bb)
            {
                bb = kv.Value;
                foreach (var e in bb.targets)
                {
                    f.WriteLine("bb_{0} -> bb_{1} [ label=\"{2}\" ];", e.src.start, e.dst.start, e.type2str());
                }
            }
            f.WriteLine("}");
            return 0;
        }
    }
}
